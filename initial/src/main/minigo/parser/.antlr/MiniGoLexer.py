# Generated from d:/Nam3-HK2/KienTrucPM/TaiLieu/Assignment1/initial/src/main/minigo/parser/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,54,482,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,1,0,1,0,1,0,1,0,3,0,128,8,0,1,1,1,1,5,1,132,
        8,1,10,1,12,1,135,9,1,1,1,3,1,138,8,1,1,2,1,2,4,2,142,8,2,11,2,12,
        2,143,1,3,1,3,1,3,4,3,149,8,3,11,3,12,3,150,1,4,1,4,1,4,4,4,156,
        8,4,11,4,12,4,157,1,5,1,5,3,5,162,8,5,1,6,4,6,165,8,6,11,6,12,6,
        166,1,6,1,6,5,6,171,8,6,10,6,12,6,174,9,6,1,6,1,6,3,6,178,8,6,1,
        6,4,6,181,8,6,11,6,12,6,182,3,6,185,8,6,1,6,1,6,4,6,189,8,6,11,6,
        12,6,190,1,6,1,6,3,6,195,8,6,1,6,4,6,198,8,6,11,6,12,6,199,3,6,202,
        8,6,1,6,4,6,205,8,6,11,6,12,6,206,1,6,1,6,3,6,211,8,6,1,6,4,6,214,
        8,6,11,6,12,6,215,3,6,218,8,6,1,7,1,7,1,7,4,7,223,8,7,11,7,12,7,
        224,1,7,3,7,228,8,7,1,7,5,7,231,8,7,10,7,12,7,234,9,7,1,7,1,7,4,
        7,238,8,7,11,7,12,7,239,3,7,242,8,7,1,7,1,7,3,7,246,8,7,1,7,4,7,
        249,8,7,11,7,12,7,250,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,262,
        8,8,1,9,1,9,1,9,5,9,267,8,9,10,9,12,9,270,9,9,1,9,1,9,1,10,1,10,
        1,10,1,11,1,11,1,11,3,11,280,8,11,1,11,1,11,1,12,1,12,1,12,1,12,
        1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,
        1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
        1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,
        1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,
        1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,
        1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,
        1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,
        1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,
        1,53,1,54,1,54,5,54,421,8,54,10,54,12,54,424,9,54,1,55,4,55,427,
        8,55,11,55,12,55,428,1,55,1,55,1,56,1,56,1,56,1,56,5,56,437,8,56,
        10,56,12,56,440,9,56,1,56,1,56,1,57,1,57,1,57,1,57,5,57,448,8,57,
        10,57,12,57,451,9,57,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,5,58,
        461,8,58,10,58,12,58,464,9,58,1,58,3,58,467,8,58,1,59,1,59,1,59,
        5,59,472,8,59,10,59,12,59,475,9,59,1,59,1,59,1,59,1,60,1,60,1,60,
        1,449,0,61,1,1,3,0,5,0,7,0,9,0,11,2,13,0,15,0,17,3,19,4,21,0,23,
        5,25,6,27,7,29,8,31,9,33,10,35,11,37,12,39,13,41,14,43,15,45,16,
        47,17,49,18,51,19,53,20,55,21,57,22,59,23,61,24,63,25,65,26,67,27,
        69,28,71,29,73,30,75,31,77,32,79,33,81,34,83,35,85,36,87,37,89,38,
        91,39,93,40,95,41,97,42,99,43,101,44,103,45,105,46,107,47,109,48,
        111,49,113,50,115,51,117,52,119,53,121,54,1,0,18,1,0,49,57,1,0,48,
        57,1,0,48,55,2,0,88,88,120,120,3,0,48,57,65,70,97,102,2,0,66,66,
        98,98,1,0,48,49,2,0,69,69,101,101,2,0,43,43,45,45,2,0,80,80,112,
        112,3,0,10,10,34,34,92,92,8,0,34,34,39,39,92,92,98,98,102,102,110,
        110,114,114,116,116,3,0,10,10,39,39,92,92,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,1,0,10,10,1,1,
        10,10,516,0,1,1,0,0,0,0,11,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
        1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
        1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,
        1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,
        1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,
        0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,
        0,0,0,1,127,1,0,0,0,3,137,1,0,0,0,5,139,1,0,0,0,7,145,1,0,0,0,9,
        152,1,0,0,0,11,161,1,0,0,0,13,217,1,0,0,0,15,219,1,0,0,0,17,261,
        1,0,0,0,19,263,1,0,0,0,21,273,1,0,0,0,23,276,1,0,0,0,25,283,1,0,
        0,0,27,287,1,0,0,0,29,292,1,0,0,0,31,295,1,0,0,0,33,300,1,0,0,0,
        35,304,1,0,0,0,37,311,1,0,0,0,39,317,1,0,0,0,41,326,1,0,0,0,43,330,
        1,0,0,0,45,336,1,0,0,0,47,344,1,0,0,0,49,347,1,0,0,0,51,350,1,0,
        0,0,53,353,1,0,0,0,55,356,1,0,0,0,57,359,1,0,0,0,59,362,1,0,0,0,
        61,365,1,0,0,0,63,368,1,0,0,0,65,371,1,0,0,0,67,374,1,0,0,0,69,376,
        1,0,0,0,71,378,1,0,0,0,73,381,1,0,0,0,75,384,1,0,0,0,77,386,1,0,
        0,0,79,388,1,0,0,0,81,390,1,0,0,0,83,392,1,0,0,0,85,394,1,0,0,0,
        87,396,1,0,0,0,89,398,1,0,0,0,91,400,1,0,0,0,93,402,1,0,0,0,95,404,
        1,0,0,0,97,406,1,0,0,0,99,408,1,0,0,0,101,410,1,0,0,0,103,412,1,
        0,0,0,105,414,1,0,0,0,107,416,1,0,0,0,109,418,1,0,0,0,111,426,1,
        0,0,0,113,432,1,0,0,0,115,443,1,0,0,0,117,457,1,0,0,0,119,468,1,
        0,0,0,121,479,1,0,0,0,123,128,3,3,1,0,124,128,3,5,2,0,125,128,3,
        7,3,0,126,128,3,9,4,0,127,123,1,0,0,0,127,124,1,0,0,0,127,125,1,
        0,0,0,127,126,1,0,0,0,128,2,1,0,0,0,129,133,7,0,0,0,130,132,7,1,
        0,0,131,130,1,0,0,0,132,135,1,0,0,0,133,131,1,0,0,0,133,134,1,0,
        0,0,134,138,1,0,0,0,135,133,1,0,0,0,136,138,5,48,0,0,137,129,1,0,
        0,0,137,136,1,0,0,0,138,4,1,0,0,0,139,141,5,48,0,0,140,142,7,2,0,
        0,141,140,1,0,0,0,142,143,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,
        0,144,6,1,0,0,0,145,146,5,48,0,0,146,148,7,3,0,0,147,149,7,4,0,0,
        148,147,1,0,0,0,149,150,1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,
        151,8,1,0,0,0,152,153,5,48,0,0,153,155,7,5,0,0,154,156,7,6,0,0,155,
        154,1,0,0,0,156,157,1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,
        10,1,0,0,0,159,162,3,13,6,0,160,162,3,15,7,0,161,159,1,0,0,0,161,
        160,1,0,0,0,162,12,1,0,0,0,163,165,7,1,0,0,164,163,1,0,0,0,165,166,
        1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,168,1,0,0,0,168,172,
        5,46,0,0,169,171,7,1,0,0,170,169,1,0,0,0,171,174,1,0,0,0,172,170,
        1,0,0,0,172,173,1,0,0,0,173,184,1,0,0,0,174,172,1,0,0,0,175,177,
        7,7,0,0,176,178,7,8,0,0,177,176,1,0,0,0,177,178,1,0,0,0,178,180,
        1,0,0,0,179,181,7,1,0,0,180,179,1,0,0,0,181,182,1,0,0,0,182,180,
        1,0,0,0,182,183,1,0,0,0,183,185,1,0,0,0,184,175,1,0,0,0,184,185,
        1,0,0,0,185,218,1,0,0,0,186,188,5,46,0,0,187,189,7,1,0,0,188,187,
        1,0,0,0,189,190,1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,0,191,201,
        1,0,0,0,192,194,7,7,0,0,193,195,7,8,0,0,194,193,1,0,0,0,194,195,
        1,0,0,0,195,197,1,0,0,0,196,198,7,1,0,0,197,196,1,0,0,0,198,199,
        1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,202,1,0,0,0,201,192,
        1,0,0,0,201,202,1,0,0,0,202,218,1,0,0,0,203,205,7,1,0,0,204,203,
        1,0,0,0,205,206,1,0,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,208,
        1,0,0,0,208,210,7,7,0,0,209,211,7,8,0,0,210,209,1,0,0,0,210,211,
        1,0,0,0,211,213,1,0,0,0,212,214,7,1,0,0,213,212,1,0,0,0,214,215,
        1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,218,1,0,0,0,217,164,
        1,0,0,0,217,186,1,0,0,0,217,204,1,0,0,0,218,14,1,0,0,0,219,220,5,
        48,0,0,220,241,7,3,0,0,221,223,7,4,0,0,222,221,1,0,0,0,223,224,1,
        0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,227,1,0,0,0,226,228,5,
        46,0,0,227,226,1,0,0,0,227,228,1,0,0,0,228,242,1,0,0,0,229,231,7,
        4,0,0,230,229,1,0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,233,1,
        0,0,0,233,235,1,0,0,0,234,232,1,0,0,0,235,237,5,46,0,0,236,238,7,
        4,0,0,237,236,1,0,0,0,238,239,1,0,0,0,239,237,1,0,0,0,239,240,1,
        0,0,0,240,242,1,0,0,0,241,222,1,0,0,0,241,232,1,0,0,0,242,243,1,
        0,0,0,243,245,7,9,0,0,244,246,7,8,0,0,245,244,1,0,0,0,245,246,1,
        0,0,0,246,248,1,0,0,0,247,249,7,1,0,0,248,247,1,0,0,0,249,250,1,
        0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,16,1,0,0,0,252,253,5,116,
        0,0,253,254,5,114,0,0,254,255,5,117,0,0,255,262,5,101,0,0,256,257,
        5,102,0,0,257,258,5,97,0,0,258,259,5,108,0,0,259,260,5,115,0,0,260,
        262,5,101,0,0,261,252,1,0,0,0,261,256,1,0,0,0,262,18,1,0,0,0,263,
        268,5,34,0,0,264,267,8,10,0,0,265,267,3,21,10,0,266,264,1,0,0,0,
        266,265,1,0,0,0,267,270,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,
        269,271,1,0,0,0,270,268,1,0,0,0,271,272,5,34,0,0,272,20,1,0,0,0,
        273,274,5,92,0,0,274,275,7,11,0,0,275,22,1,0,0,0,276,279,5,39,0,
        0,277,280,8,12,0,0,278,280,3,21,10,0,279,277,1,0,0,0,279,278,1,0,
        0,0,280,281,1,0,0,0,281,282,5,39,0,0,282,24,1,0,0,0,283,284,5,118,
        0,0,284,285,5,97,0,0,285,286,5,114,0,0,286,26,1,0,0,0,287,288,5,
        102,0,0,288,289,5,117,0,0,289,290,5,110,0,0,290,291,5,99,0,0,291,
        28,1,0,0,0,292,293,5,105,0,0,293,294,5,102,0,0,294,30,1,0,0,0,295,
        296,5,101,0,0,296,297,5,108,0,0,297,298,5,115,0,0,298,299,5,101,
        0,0,299,32,1,0,0,0,300,301,5,102,0,0,301,302,5,111,0,0,302,303,5,
        114,0,0,303,34,1,0,0,0,304,305,5,114,0,0,305,306,5,101,0,0,306,307,
        5,116,0,0,307,308,5,117,0,0,308,309,5,114,0,0,309,310,5,110,0,0,
        310,36,1,0,0,0,311,312,5,98,0,0,312,313,5,114,0,0,313,314,5,101,
        0,0,314,315,5,97,0,0,315,316,5,107,0,0,316,38,1,0,0,0,317,318,5,
        99,0,0,318,319,5,111,0,0,319,320,5,110,0,0,320,321,5,116,0,0,321,
        322,5,105,0,0,322,323,5,110,0,0,323,324,5,117,0,0,324,325,5,101,
        0,0,325,40,1,0,0,0,326,327,5,105,0,0,327,328,5,110,0,0,328,329,5,
        116,0,0,329,42,1,0,0,0,330,331,5,102,0,0,331,332,5,108,0,0,332,333,
        5,111,0,0,333,334,5,97,0,0,334,335,5,116,0,0,335,44,1,0,0,0,336,
        337,5,98,0,0,337,338,5,111,0,0,338,339,5,111,0,0,339,340,5,108,0,
        0,340,341,5,101,0,0,341,342,5,97,0,0,342,343,5,110,0,0,343,46,1,
        0,0,0,344,345,5,43,0,0,345,346,5,43,0,0,346,48,1,0,0,0,347,348,5,
        45,0,0,348,349,5,45,0,0,349,50,1,0,0,0,350,351,5,43,0,0,351,352,
        5,61,0,0,352,52,1,0,0,0,353,354,5,45,0,0,354,355,5,61,0,0,355,54,
        1,0,0,0,356,357,5,42,0,0,357,358,5,61,0,0,358,56,1,0,0,0,359,360,
        5,47,0,0,360,361,5,61,0,0,361,58,1,0,0,0,362,363,5,61,0,0,363,364,
        5,61,0,0,364,60,1,0,0,0,365,366,5,33,0,0,366,367,5,61,0,0,367,62,
        1,0,0,0,368,369,5,60,0,0,369,370,5,61,0,0,370,64,1,0,0,0,371,372,
        5,62,0,0,372,373,5,61,0,0,373,66,1,0,0,0,374,375,5,60,0,0,375,68,
        1,0,0,0,376,377,5,62,0,0,377,70,1,0,0,0,378,379,5,38,0,0,379,380,
        5,38,0,0,380,72,1,0,0,0,381,382,5,124,0,0,382,383,5,124,0,0,383,
        74,1,0,0,0,384,385,5,33,0,0,385,76,1,0,0,0,386,387,5,43,0,0,387,
        78,1,0,0,0,388,389,5,45,0,0,389,80,1,0,0,0,390,391,5,42,0,0,391,
        82,1,0,0,0,392,393,5,47,0,0,393,84,1,0,0,0,394,395,5,37,0,0,395,
        86,1,0,0,0,396,397,5,61,0,0,397,88,1,0,0,0,398,399,5,40,0,0,399,
        90,1,0,0,0,400,401,5,41,0,0,401,92,1,0,0,0,402,403,5,123,0,0,403,
        94,1,0,0,0,404,405,5,125,0,0,405,96,1,0,0,0,406,407,5,91,0,0,407,
        98,1,0,0,0,408,409,5,93,0,0,409,100,1,0,0,0,410,411,5,59,0,0,411,
        102,1,0,0,0,412,413,5,44,0,0,413,104,1,0,0,0,414,415,5,58,0,0,415,
        106,1,0,0,0,416,417,5,46,0,0,417,108,1,0,0,0,418,422,7,13,0,0,419,
        421,7,14,0,0,420,419,1,0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,422,
        423,1,0,0,0,423,110,1,0,0,0,424,422,1,0,0,0,425,427,7,15,0,0,426,
        425,1,0,0,0,427,428,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,
        430,1,0,0,0,430,431,6,55,0,0,431,112,1,0,0,0,432,433,5,47,0,0,433,
        434,5,47,0,0,434,438,1,0,0,0,435,437,8,16,0,0,436,435,1,0,0,0,437,
        440,1,0,0,0,438,436,1,0,0,0,438,439,1,0,0,0,439,441,1,0,0,0,440,
        438,1,0,0,0,441,442,6,56,0,0,442,114,1,0,0,0,443,444,5,47,0,0,444,
        445,5,42,0,0,445,449,1,0,0,0,446,448,9,0,0,0,447,446,1,0,0,0,448,
        451,1,0,0,0,449,450,1,0,0,0,449,447,1,0,0,0,450,452,1,0,0,0,451,
        449,1,0,0,0,452,453,5,42,0,0,453,454,5,47,0,0,454,455,1,0,0,0,455,
        456,6,57,0,0,456,116,1,0,0,0,457,462,5,34,0,0,458,461,8,10,0,0,459,
        461,3,21,10,0,460,458,1,0,0,0,460,459,1,0,0,0,461,464,1,0,0,0,462,
        460,1,0,0,0,462,463,1,0,0,0,463,466,1,0,0,0,464,462,1,0,0,0,465,
        467,7,17,0,0,466,465,1,0,0,0,467,118,1,0,0,0,468,473,5,34,0,0,469,
        472,8,10,0,0,470,472,3,21,10,0,471,469,1,0,0,0,471,470,1,0,0,0,472,
        475,1,0,0,0,473,471,1,0,0,0,473,474,1,0,0,0,474,476,1,0,0,0,475,
        473,1,0,0,0,476,477,5,92,0,0,477,478,8,11,0,0,478,120,1,0,0,0,479,
        480,9,0,0,0,480,481,6,60,1,0,481,122,1,0,0,0,41,0,127,133,137,143,
        150,157,161,166,172,177,182,184,190,194,199,201,206,210,215,217,
        224,227,232,239,241,245,250,261,266,268,279,422,428,438,449,460,
        462,466,471,473,2,6,0,0,1,60,0
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    INTLIT = 1
    FLOATLIT = 2
    BOOLLIT = 3
    STRINGLIT = 4
    RUNELIT = 5
    VAR = 6
    FUNC = 7
    IF = 8
    ELSE = 9
    FOR = 10
    RETURN = 11
    BREAK = 12
    CONTINUE = 13
    INT = 14
    FLOAT = 15
    BOOLEAN = 16
    INCREMENT = 17
    DECREMENT = 18
    PLUS_ASSIGN = 19
    MINUS_ASSIGN = 20
    MUL_ASSIGN = 21
    DIV_ASSIGN = 22
    EQ = 23
    NEQ = 24
    LE = 25
    GE = 26
    LT = 27
    GT = 28
    AND = 29
    OR = 30
    NOT = 31
    PLUS = 32
    MINUS = 33
    MUL = 34
    DIV = 35
    MOD = 36
    ASSIGN = 37
    LPAREN = 38
    RPAREN = 39
    LBRACE = 40
    RBRACE = 41
    LBRACKET = 42
    RBRACKET = 43
    SEMI = 44
    COMMA = 45
    COLON = 46
    DOT = 47
    ID = 48
    WS = 49
    LINE_COMMENT = 50
    BLOCK_COMMENT = 51
    UNCLOSE_STRING = 52
    ILLEGAL_ESCAPE = 53
    ERROR_CHAR = 54

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'var'", "'func'", "'if'", "'else'", "'for'", "'return'", "'break'", 
            "'continue'", "'int'", "'float'", "'boolean'", "'++'", "'--'", 
            "'+='", "'-='", "'*='", "'/='", "'=='", "'!='", "'<='", "'>='", 
            "'<'", "'>'", "'&&'", "'||'", "'!'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'='", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", 
            "','", "':'", "'.'" ]

    symbolicNames = [ "<INVALID>",
            "INTLIT", "FLOATLIT", "BOOLLIT", "STRINGLIT", "RUNELIT", "VAR", 
            "FUNC", "IF", "ELSE", "FOR", "RETURN", "BREAK", "CONTINUE", 
            "INT", "FLOAT", "BOOLEAN", "INCREMENT", "DECREMENT", "PLUS_ASSIGN", 
            "MINUS_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "EQ", "NEQ", "LE", 
            "GE", "LT", "GT", "AND", "OR", "NOT", "PLUS", "MINUS", "MUL", 
            "DIV", "MOD", "ASSIGN", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
            "LBRACKET", "RBRACKET", "SEMI", "COMMA", "COLON", "DOT", "ID", 
            "WS", "LINE_COMMENT", "BLOCK_COMMENT", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", 
            "ERROR_CHAR" ]

    ruleNames = [ "INTLIT", "DecimalLit", "OctalLit", "HexLit", "BinaryLit", 
                  "FLOATLIT", "DecimalFloat", "HexFloat", "BOOLLIT", "STRINGLIT", 
                  "EscapeSeq", "RUNELIT", "VAR", "FUNC", "IF", "ELSE", "FOR", 
                  "RETURN", "BREAK", "CONTINUE", "INT", "FLOAT", "BOOLEAN", 
                  "INCREMENT", "DECREMENT", "PLUS_ASSIGN", "MINUS_ASSIGN", 
                  "MUL_ASSIGN", "DIV_ASSIGN", "EQ", "NEQ", "LE", "GE", "LT", 
                  "GT", "AND", "OR", "NOT", "PLUS", "MINUS", "MUL", "DIV", 
                  "MOD", "ASSIGN", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                  "LBRACKET", "RBRACKET", "SEMI", "COMMA", "COLON", "DOT", 
                  "ID", "WS", "LINE_COMMENT", "BLOCK_COMMENT", "UNCLOSE_STRING", 
                  "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


        def emit(self):
            tk = self.type
            if tk == self.UNCLOSE_STRING:       
                result = super().emit()
                text = result.text
                if text[-1] in ['\n', '\r']:
                    raise UncloseString(text[:-1]) 
                else:
                    raise UncloseString(text)       
            elif tk == self.ILLEGAL_ESCAPE:
                result = super().emit()
                raise IllegalEscape(result.text)    
            elif tk == self.ERROR_CHAR:
                result = super().emit()
                raise ErrorToken(result.text)
            else:
                return super().emit()


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[60] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
             raise ErrorToken(self.text) 
     


